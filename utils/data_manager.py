# utils/data_manager.py
import json
import traceback
from pathlib import Path
import datetime
import config

DATA_FILE = None # Inizia come None
SAVE_FUNC = None
LOAD_FUNC = None
GET_ID_FUNC = None
MEDIATORS_FILE_PATH = config.MEDIATORS_FILE

def initialize_data_handling():
    """Tenta di importare da gestore_dati e imposta le funzioni,
       restituisce il path effettivo del file dati."""
    global DATA_FILE, SAVE_FUNC, LOAD_FUNC, GET_ID_FUNC
    data_file_path = None # Variabile locale per il path
    gestore_found = False
    try:
        from gestore_dati import (
            load_requests as load_requests_ext,
            save_requests as save_requests_ext,
            get_next_id as get_next_id_ext,
            DATA_FILE as DATA_FILE_EXT
        )
        print("INFO: Gestione dati inizializzata da 'gestore_dati.py'.")
        gestore_found = True
        try:
            data_file_path = Path(DATA_FILE_EXT) # Imposta path locale
            print(f"INFO: Usando DATA_FILE '{data_file_path.resolve()}' da gestore_dati.py")
        except NameError:
            data_file_path = config.DATA_FILE_FALLBACK # Usa fallback se costante manca
            print(f"WARNING: DATA_FILE non in gestore_dati, usando fallback path: '{data_file_path.resolve()}'")

        LOAD_FUNC = load_requests_ext
        SAVE_FUNC = save_requests_ext
        GET_ID_FUNC = get_next_id_ext

    except ImportError:
        print("WARNING: 'gestore_dati.py' non trovato. Usando fallback data handling.")
        data_file_path = config.DATA_FILE_FALLBACK # Imposta path locale fallback
        print(f"INFO: Usando DATA_FILE fallback: '{data_file_path.resolve()}'")
        LOAD_FUNC = _load_requests_fallback
        SAVE_FUNC = _save_requests_fallback
        GET_ID_FUNC = _get_next_id_fallback

    # Imposta la variabile globale del modulo
    DATA_FILE = data_file_path

    # Restituisci il path e un flag che indica se gestore_dati è stato usato
    return data_file_path, gestore_found

# ... (funzioni fallback _load_requests_fallback, _save_requests_fallback, _get_next_id_fallback invariate) ...
def _load_requests_fallback(): # ...
    print("DEBUG: _load_requests_fallback()"); # ...
    if not DATA_FILE.exists(): return [] # ...
    try: # ...
        with open(DATA_FILE, 'r', encoding='utf-8') as f: data = json.load(f) # ...
        return data if isinstance(data, list) else [] # ...
    except Exception as e: print(f"Err load fallback: {e}"); return [] # ...
def _save_requests_fallback(data, force_save=False): # ...
    print(f"DEBUG: _save_requests_fallback() con {len(data)}. ForceSave={force_save}") # ...
    if not isinstance(data, list): return # ...
    try: # ...
        updated_count = 0 # ...
        for req in data: # ...
             if isinstance(req, dict) and 'richiedente_username' not in req: req['richiedente_username'] = None; updated_count += 1 # ...
        if updated_count > 0 or force_save: # ...
            if updated_count > 0: print(f"DEBUG save_requests (fallback): Added 'richiedente_username'. SAVING.") # ...
            else: print(f"DEBUG save_requests (fallback): ForceSave=True. SAVING.") # ...
            with open(DATA_FILE, 'w', encoding='utf-8') as f: json.dump(data, f, indent=4, ensure_ascii=False) # ...
            print("DEBUG: Salvataggio fallback completato.") # ...
        else: print("DEBUG save_requests (fallback): No changes and ForceSave=False. SKIPPING SAVE.") # ...
    except Exception as e: print(f"Error saving fallback data: {e}"); traceback.print_exc() # ...
def _get_next_id_fallback(requests): # ...
    print("DEBUG: _get_next_id_fallback()"); # ...
    if not requests or not isinstance(requests, list): return 1 # ...
    try: ids = [int(r.get('id', 0)) for r in requests if isinstance(r, dict) and str(r.get('id', '0')).isdigit()]; return max(ids) + 1 if ids else 1 # ...
    except Exception as e: print(f"Err get_next_id fallback: {e}"); return len(requests) + 1 # ...

# --- Funzioni Pubbliche Esportate (invariate) ---
def load_requests():
    if LOAD_FUNC: return LOAD_FUNC()
    else: raise RuntimeError("Data handling non inizializzato.")

def save_requests(data, force_save=False):
     if SAVE_FUNC:
         try: SAVE_FUNC(data, force_save=force_save)
         except TypeError: print("WARNING: SAVE_FUNC esterna non accetta 'force_save'. Chiamata senza."); SAVE_FUNC(data)
     else: raise RuntimeError("Data handling non inizializzato.")

def get_next_id(requests):
    if GET_ID_FUNC: return GET_ID_FUNC(requests)
    else: raise RuntimeError("Data handling non inizializzato.")

# --- Funzioni Mediatori (invariate) ---
def load_mediators():
    # ... (codice load_mediators invariato) ...
    print("DEBUG: load_mediators()") # ...
    if not MEDIATORS_FILE_PATH.exists(): # ...
        print(f"ATTENZIONE: File mediatori '{MEDIATORS_FILE_PATH}' non trovato. Inizio con lista vuota.") # ...
        return [] # ...
    try: # ...
        with open(MEDIATORS_FILE_PATH, 'r', encoding='utf-8') as f: # ...
            mediators = json.load(f) # ...
        if isinstance(mediators, list) and all(isinstance(m, str) for m in mediators): # ...
            print(f"DEBUG: Caricati {len(mediators)} mediatori.") # ...
            return sorted(mediators) # ...
        else: # ...
            print(f"ERRORE: Contenuto di '{MEDIATORS_FILE_PATH}' non è una lista di stringhe valida. Ritorno lista vuota.") # ...
            return [] # ...
    except json.JSONDecodeError: # ...
        print(f"ERRORE: Decode JSON fallito '{MEDIATORS_FILE_PATH}'. Ritorno lista vuota.") # ...
        return [] # ...
    except Exception as e: # ...
        print(f"Errore caricamento mediatori da '{MEDIATORS_FILE_PATH}': {e}") # ...
        traceback.print_exc() # ...
        return [] # ...

def save_mediators(mediators_list):
    # ... (codice save_mediators invariato) ...
    print(f"DEBUG: save_mediators() con {len(mediators_list)} mediatori.") # ...
    if not isinstance(mediators_list, list) or not all(isinstance(m, str) for m in mediators_list): # ...
        print("ERRORE save_mediators: I dati forniti non sono una lista di stringhe valida.") # ...
        return # ...
    try: # ...
        with open(MEDIATORS_FILE_PATH, 'w', encoding='utf-8') as f: # ...
            json.dump(sorted(list(set(mediators_list))), f, indent=4, ensure_ascii=False) # ...
        print("DEBUG: Salvataggio mediatori completato.") # ...
    except Exception as e: # ...
        print(f"Errore salvataggio mediatori in '{MEDIATORS_FILE_PATH}': {e}") # ...
        traceback.print_exc() # ...